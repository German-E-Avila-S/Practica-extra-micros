const int ledPin = 13;
const int buttonPin = 2;

volatile bool ledState = false;
bool interruptEnabled = false;

void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);

  Serial.begin(9600);
  Serial.println("Escribe 'ON' para activar la interrupción, 'OFF' para desactivarla.");
}

void loop() {
  // Muestra el estado actual del LED si la interrupción está activada
  if (interruptEnabled) {
    digitalWrite(ledPin, ledState);
  } else {
    // Parpadea automáticamente si no hay interrupción
    digitalWrite(ledPin, HIGH);
    delay(500);
    digitalWrite(ledPin, LOW);
    delay(500);
  }

  // Verifica comandos por Serial
  if (Serial.available()) {
    String input = Serial.readStringUntil('\n');
    input.trim();

    if (input.equalsIgnoreCase("ON")) {
      if (!interruptEnabled) {
        attachInterrupt(digitalPinToInterrupt(buttonPin), toggleLED, FALLING);
        interruptEnabled = true;
        Serial.println("Interrupción ACTIVADA. El parpadeo se detiene.");
      } else {
        Serial.println("La interrupción ya está activa.");
      }
    } else if (input.equalsIgnoreCase("OFF")) {
      if (interruptEnabled) {
        detachInterrupt(digitalPinToInterrupt(buttonPin));
        interruptEnabled = false;
        Serial.println("Interrupción DESACTIVADA. El LED vuelve a parpadear.");
      } else {
        Serial.println("La interrupción ya está desactivada.");
      }
    } else {
      Serial.println("Comando no reconocido. Usa 'ON' o 'OFF'.");
    }
  }
}

// Función de interrupción
void toggleLED() {
  ledState = !ledState;
}
