const int ledPin = 13;

volatile bool ledState = false;
bool interruptEnabled = false; // Bandera para saber si la interrupción está activa

void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);

  Serial.begin(9600);
  Serial.println("Escribe 'ON' para activar la interrupción, 'OFF' para desactivarla.");
}

void loop() {
  digitalWrite(ledPin, ledState);

  // Lee entrada desde el Monitor Serial
  if (Serial.available()) {
    String input = Serial.readStringUntil('\n');
    input.trim(); // Elimina espacios en blanco y saltos de línea

    if (input.equalsIgnoreCase("ON")) {
      if (!interruptEnabled) {
        attachInterrupt(digitalPinToInterrupt(buttonPin), toggleLED, FALLING);
        interruptEnabled = true;
        Serial.println("Interrupción ACTIVADA.");
      } else {
        Serial.println("La interrupción ya está activa.");
      }
    } else if (input.equalsIgnoreCase("OFF")) {
      if (interruptEnabled) {
        detachInterrupt(digitalPinToInterrupt(buttonPin));
        interruptEnabled = false;
        Serial.println("Interrupción DESACTIVADA.");
      } else {
        Serial.println("La interrupción ya está desactivada.");
      }
    } else {
      Serial.println("Comando no reconocido. Usa 'ON' o 'OFF'.");
    }
  }
}

void toggleLED() {
  ledState = !ledState;
}
